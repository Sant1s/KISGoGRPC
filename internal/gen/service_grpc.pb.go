// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service.proto

package blogService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlogPostService_ListBlogPosts_FullMethodName  = "/kis.blog.backend.BlogPostService/ListBlogPosts"
	BlogPostService_GetBlogPost_FullMethodName    = "/kis.blog.backend.BlogPostService/GetBlogPost"
	BlogPostService_CreateBlogPost_FullMethodName = "/kis.blog.backend.BlogPostService/CreateBlogPost"
	BlogPostService_UpdateBlogPost_FullMethodName = "/kis.blog.backend.BlogPostService/UpdateBlogPost"
	BlogPostService_DeleteBlogPost_FullMethodName = "/kis.blog.backend.BlogPostService/DeleteBlogPost"
)

// BlogPostServiceClient is the client API for BlogPostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogPostServiceClient interface {
	ListBlogPosts(ctx context.Context, in *ListBlogPostsRequest, opts ...grpc.CallOption) (*ListBlogPostsResponse, error)
	GetBlogPost(ctx context.Context, in *GetBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error)
	CreateBlogPost(ctx context.Context, in *CreateBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error)
	UpdateBlogPost(ctx context.Context, in *UpdateBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error)
	DeleteBlogPost(ctx context.Context, in *DeleteBlogPostRequest, opts ...grpc.CallOption) (*Empty, error)
}

type blogPostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogPostServiceClient(cc grpc.ClientConnInterface) BlogPostServiceClient {
	return &blogPostServiceClient{cc}
}

func (c *blogPostServiceClient) ListBlogPosts(ctx context.Context, in *ListBlogPostsRequest, opts ...grpc.CallOption) (*ListBlogPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlogPostsResponse)
	err := c.cc.Invoke(ctx, BlogPostService_ListBlogPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogPostServiceClient) GetBlogPost(ctx context.Context, in *GetBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogPost)
	err := c.cc.Invoke(ctx, BlogPostService_GetBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogPostServiceClient) CreateBlogPost(ctx context.Context, in *CreateBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogPost)
	err := c.cc.Invoke(ctx, BlogPostService_CreateBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogPostServiceClient) UpdateBlogPost(ctx context.Context, in *UpdateBlogPostRequest, opts ...grpc.CallOption) (*BlogPost, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlogPost)
	err := c.cc.Invoke(ctx, BlogPostService_UpdateBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogPostServiceClient) DeleteBlogPost(ctx context.Context, in *DeleteBlogPostRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BlogPostService_DeleteBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogPostServiceServer is the server API for BlogPostService service.
// All implementations must embed UnimplementedBlogPostServiceServer
// for forward compatibility.
type BlogPostServiceServer interface {
	ListBlogPosts(context.Context, *ListBlogPostsRequest) (*ListBlogPostsResponse, error)
	GetBlogPost(context.Context, *GetBlogPostRequest) (*BlogPost, error)
	CreateBlogPost(context.Context, *CreateBlogPostRequest) (*BlogPost, error)
	UpdateBlogPost(context.Context, *UpdateBlogPostRequest) (*BlogPost, error)
	DeleteBlogPost(context.Context, *DeleteBlogPostRequest) (*Empty, error)
	mustEmbedUnimplementedBlogPostServiceServer()
}

// UnimplementedBlogPostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlogPostServiceServer struct{}

func (UnimplementedBlogPostServiceServer) ListBlogPosts(context.Context, *ListBlogPostsRequest) (*ListBlogPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlogPosts not implemented")
}
func (UnimplementedBlogPostServiceServer) GetBlogPost(context.Context, *GetBlogPostRequest) (*BlogPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogPost not implemented")
}
func (UnimplementedBlogPostServiceServer) CreateBlogPost(context.Context, *CreateBlogPostRequest) (*BlogPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlogPost not implemented")
}
func (UnimplementedBlogPostServiceServer) UpdateBlogPost(context.Context, *UpdateBlogPostRequest) (*BlogPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlogPost not implemented")
}
func (UnimplementedBlogPostServiceServer) DeleteBlogPost(context.Context, *DeleteBlogPostRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlogPost not implemented")
}
func (UnimplementedBlogPostServiceServer) mustEmbedUnimplementedBlogPostServiceServer() {}
func (UnimplementedBlogPostServiceServer) testEmbeddedByValue()                         {}

// UnsafeBlogPostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogPostServiceServer will
// result in compilation errors.
type UnsafeBlogPostServiceServer interface {
	mustEmbedUnimplementedBlogPostServiceServer()
}

func RegisterBlogPostServiceServer(s grpc.ServiceRegistrar, srv BlogPostServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlogPostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlogPostService_ServiceDesc, srv)
}

func _BlogPostService_ListBlogPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlogPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServiceServer).ListBlogPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogPostService_ListBlogPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServiceServer).ListBlogPosts(ctx, req.(*ListBlogPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogPostService_GetBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServiceServer).GetBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogPostService_GetBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServiceServer).GetBlogPost(ctx, req.(*GetBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogPostService_CreateBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServiceServer).CreateBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogPostService_CreateBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServiceServer).CreateBlogPost(ctx, req.(*CreateBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogPostService_UpdateBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServiceServer).UpdateBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogPostService_UpdateBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServiceServer).UpdateBlogPost(ctx, req.(*UpdateBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogPostService_DeleteBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogPostServiceServer).DeleteBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogPostService_DeleteBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogPostServiceServer).DeleteBlogPost(ctx, req.(*DeleteBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogPostService_ServiceDesc is the grpc.ServiceDesc for BlogPostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogPostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kis.blog.backend.BlogPostService",
	HandlerType: (*BlogPostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBlogPosts",
			Handler:    _BlogPostService_ListBlogPosts_Handler,
		},
		{
			MethodName: "GetBlogPost",
			Handler:    _BlogPostService_GetBlogPost_Handler,
		},
		{
			MethodName: "CreateBlogPost",
			Handler:    _BlogPostService_CreateBlogPost_Handler,
		},
		{
			MethodName: "UpdateBlogPost",
			Handler:    _BlogPostService_UpdateBlogPost_Handler,
		},
		{
			MethodName: "DeleteBlogPost",
			Handler:    _BlogPostService_DeleteBlogPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
